##
## Velocity macros for The Fascinator
##

##
## Parse a template
## $template : The template to parse
##
#macro(parseTemplate $template)
    #set($templatePath = $Services.velocityService.resourceExists($portalId, $template))
    #parse($templatePath)
#end

#macro(parseDisplayTemplate $template)
    #set($templatePath = $Services.velocityService.resourceExists($portalId, "display/$displayType/$template"))
    #parse($templatePath)
#end

##
## Render an object display
## $template : The template to render
## $metadata : Object metadata in Solr JSON format
##
#macro(renderObject $metadata $template)
    $Services.pageService.renderObject($velocityContext, $template, $metadata)
#end


##
## Display a string based on the message code
##
## $message : the message code
##
#macro(displayMessage $message)
## All on one line to avoid line breaks
#set($languageService = $Services.getService("languageService"))#if($languageService && $message)#set($message = $languageService.displayMessage($message))#end$message#end

## Like above but is region bound
##
#macro(displayMessage $message $region)
#set($languageService = $Services.getService("languageService"))#if($languageService && $message)#set($message = $languageService.displayMessage($message, $region))#end$message#end

##
## Display a value or an empty string
##
## $key : the key of field
##
#macro(getValue $key)
    $StringEscapeUtils.escapeHtml("$jsonUtil.getEmptyIfNull($item, $key)")
#end


##
## Display an arrary of strings in an un-ordered list
##
## $vals : an array of strings for display
##
#macro(displayUL $vals)
	#displayList("ul" $vals)
#end

##
## Display an arrary of strings in a list
##
## $listType : either ul or ol
## $vals : an array of strings for display
##
#macro(displayList $listType $vals)
<$listType>
	#foreach( $v in $vals )
	#if ($v && $v != 'null' && $!v != "")
	<li>$StringEscapeUtils.escapeHtml($v)</li> #end
	#end
</$listType>
#end

##
## Display an arrary of repeatables, e.g. ANZSRC-FOR in an un-ordered list
##
## $baseKey : main key, e.g. "dc:subject.anzsrc:for" 
## $subKey : sub key, e.g. "skos:prefLabel"
##
#macro(displayRepeatablesUL $baseKey $subKey)
	#set($repeats = $jsonUtil.getJavaList($item, "$baseKey"))
	#set( $valStr = '' )
	#foreach($v in $repeats)
		#set($v = $v.get("$subKey").trim())
		#if($v && $!v != '')
			#set( $valStr = "${valStr},${v}" )
		#end
	#end
	#if( $valStr != '')
	  #set($vals = $valStr.split(","))
	  #displayUL($vals)
	#end
#end

##
## Display a set of labels filtered by a list
## This is mainly used for display checkboxes use their prefLabels not raw values
##
## $labels : labels to be displayed
## $filters : values for filtering, e.g. values of checkbox
## both should have the same size
##
#macro(displayULFiltered $labels $filters)
    #set($n = 0)
    #set($filtered = [])
    #foreach( $v in $filters )
	#if ($v && $v != 'null' && $!v != "") 
	    #set($silent = $filtered.add($labels.get($n)))
	#end
	#set($n = $n + 1)
    #end
    #displayUL($filtered)
#end