<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd   http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!--
		This will automatically locate any and all property files you have
		within your classpath, provided they fall under the META-INF
		directory. The located property files are parsed and their values can
		then be used within application context files in the form of
		${propertyKey}.
	-->
	<bean
        class="com.googlecode.fascinator.common.FascinatorPropertyPlaceHolderConfigurer">
        <property name="locations">
            <list>
                <value>file:src/test/resources/*.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>
    	
	<bean id="applicationContextProvider" class="com.googlecode.fascinator.spring.ApplicationContextProvider"></bean>
	
	<bean id="databaseString" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="${jdbc.databaseurl}" />
	</bean>
	
	<import resource="file:src/main/config/home/applicationContext-*.xml" />
	<import resource="file:src/test/config/home/applicationContext-*.xml" />
	
	<bean id="hibernateAuthUserDao"
		class="com.googlecode.fascinator.dao.impl.GenericDaoHibernateImpl">
		<constructor-arg>
			<value>com.googlecode.fascinator.common.authentication.hibernate.HibernateUser</value>
		</constructor-arg>
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="queryMap">
			<map key-type="java.lang.String" value-type="java.lang.String">
				<entry key="getUserWithSource" value="FROM HibernateUser WHERE username = :username AND source = :source"/>
				<entry key="getUser" value="FROM HibernateUser WHERE username = :username"/>
			</map>
		</property>		
	</bean>
	
	<bean id="hibernateAuthUserAttributeDao"
		class="com.googlecode.fascinator.dao.impl.GenericDaoHibernateImpl">
		<constructor-arg>
			<value>com.googlecode.fascinator.common.authentication.hibernate.HibernateUserAttribute</value>
		</constructor-arg>
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="queryMap">
			<map key-type="java.lang.String" value-type="java.lang.String">
				<entry key="getAllFromUser" value="FROM HibernateUserAttribute WHERE user = :user"/>
				<entry key="getUserAttributeByKeyAndValue" value="FROM HibernateUserAttribute WHERE keyStr=:key AND valStr=:value"/>
			</map>
		</property>				
	</bean>
	<context:component-scan base-package="com.googlecode.fascinator" />
	
</beans>